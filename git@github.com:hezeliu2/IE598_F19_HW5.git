import pandas as pd 
import numpy as np
df = pd.read_csv('hw5.csv')
df=df.dropna()
df.head()

import matplotlib.pyplot as plt
import seaborn as sns
df.describe()

import matplotlib.pyplot as plt
import seaborn as sns
sns.pairplot(df, height=2.5)
plt.tight_layout()
plt.show()

df=df.drop(columns=['Date'])
cm = np.corrcoef(df.values.T)
sns.set(font_scale=2)
hm = sns.heatmap(cm,
                 cbar=True,
                 annot=True,
                 square=True,
                 fmt='.1f',
                 annot_kws={'size': 8})
plt.gcf().set_size_inches(20, 20)

from sklearn.model_selection import train_test_split
X, y = df.iloc[:, 0:30], df.iloc[:, -1]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.15,random_state = 42) 

from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
sc = StandardScaler()
pca = PCA(n_components=3)
X_train_std = sc.fit_transform(X_train)
X_test_std = sc.transform(X_test)
cov_mat = np.cov(X_test_std.T)
eigen_vals, eigen_vecs = np.linalg.eig(cov_mat)
print(eigen_vals)

tot = sum(eigen_vals)
var_exp = [(i/tot) for i in sorted(eigen_vals,reverse=True)]
cum_var_exp = np.cumsum(var_exp)
plt.bar(range(0,30),var_exp,alpha=0.5,align='center',label='individual explained variance')
plt.step(range(0,30),cum_var_exp,where='mid',label='cumulative explained variance')
plt.ylabel('Explained variance ratio')
plt.xlabel('Principal component index')
plt.legend(loc='best')
plt.show()

from sklearn.linear_model import LinearRegression 
from sklearn.metrics import mean_squared_error as MSE
import time
reg = LinearRegression()
reg.fit(X_train_std,y_train)
y_test_pred = reg.predict(X_test_std)
y_train_pred = reg.predict(X_train_std)
start= time.clock()
print( 'train R^2',reg.score(X_train_std,y_train),'train RMSE ',np.sqrt(MSE(y_train,y_train_pred)),'test R^2',reg.score(X_test_std,y_test),
      'test RMSE ', np.sqrt(MSE(y_test,y_test_pred)))
end= time.clock()
print("Run time:", end - start,'s')

from sklearn.svm import SVR
svr = SVR()
svr.fit(X_train_std,y_train)
y_test_pred = svr.predict(X_test_std)
y_train_pred = svr.predict(X_train_std)
start= time.clock()
print('train R^2 ', svr.score(X_train_std, y_train), 'train RMSE ', np.sqrt( MSE(y_train, y_train_pred)),'test R^2',svr.score(X_test_std,y_test),
        'test RMSE ', np.sqrt(MSE(y_test_pred, y_test)))
end= time.clock()
print("Run time", end - start,'s')

X_train_pca = pca.fit_transform(X_train_std)
X_test_pca = pca.fit_transform(X_test_std)
reg.fit(X_train_pca,y_train)
y_test_pred = reg.predict(X_test_pca)
y_train_pred = reg.predict(X_train_pca)
start= time.clock()
print('train R^2 ', svr.score(X_train_pca, y_train), 'train RMSE ', np.sqrt( MSE(y_train, y_train_pred)),'test R^2',svr.score(X_test_pca,y_test),
        'test RMSE ', np.sqrt(MSE(y_test_pred, y_test)))
end= time.clock()
print("Run time", end - start,'s')

svr.fit(X_train_pca,y_train)
y_test_pred = svr.predict(X_test_pca)
y_train_pred = svr.predict(X_train_pca)
start= time.clock()
print('train R^2 ', svr.score(X_train_pca, y_train), 'train RMSE ', np.sqrt( MSE(y_train, y_train_pred)),'test R^2',svr.score(X_test_pca,y_test),
        'test RMSE ', np.sqrt(MSE(y_test_pred, y_test)))
end= time.clock()
print("Run time", end - start,'s')

print('The pca mathod can save lots of time when using the svr method,but in regular method, the time is pretty short and the pca show no superiority. ')
print('LinearRegression model perfrom better on the untransformed data. ')
print('But when using pca, the SVR is much better than the reg. ')

print("My name is Heze Liu")
print("My NetID is: hezeliu2")
print("I hereby certify that I have read the University policy on Academic Integrity and that I am not in violation.")
